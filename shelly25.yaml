esphome:
  name: ${devicename}
  platform: ESP8266
  board: esp01_1m

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: !secret fallback_ssid
    password: !secret fallback_password

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret api_password

ota:
  password: !secret ota_password

web_server:
  port: 80

i2c:
  sda: ${pin_sda}
  scl: ${pin_scl}

sensor:
  - platform: ade7953
    voltage:
      name: Shelly Voltage
    current_a:
      name: Shelly Current B
    current_b:
      name: Shelly Current A
    active_power_a:
      name: Shelly Active Power B
      id: shelly_active_power_b
      filters:
        - multiply: -1
    active_power_b:
      name: Shelly Active Power A
      id: shelly_active_power_a
      filters:
        - multiply: -1
    update_interval: 60s

  # NTC Temperature
  - platform: ntc
    sensor: temp_resistance_reading
    name: "Shelly Temperature"
    calibration:
      b_constant: 3350
      reference_resistance: 10kOhm
      reference_temperature: 298.15K

  - platform: resistance
    id: temp_resistance_reading
    sensor: temp_analog_reading
    configuration: DOWNSTREAM
    resistor: 32kOhm

  - platform: adc
    id: temp_analog_reading
    pin: ${pin_temp}

switch:
  - platform: gpio
    pin: ${pin_relay1}
    name: "Relay #1"
    id: relay1
    interlock: &interlock_group [relay1, relay2]

  - platform: gpio
    pin: ${pin_relay2}
    name: "Relay #2"
    id: relay2
    interlock: *interlock_group

  - platform: template
    id: block_control
    name: "Block Control"
    optimistic: true

  - platform: template
    name: "Move UP"
    lambda: |-
      if (id(switch1).state && !id(block_control).state) {
        return true;
      } else {
        return false;
      }
    on_turn_on:
      then:
        cover.open: rolladen

  - platform: template
    name: "Move DOWN"
    lambda: |-
      if (id(switch2).state && !id(block_control).state) {
        return true;
      } else {
        return false;
      }
    on_turn_on:
      then:
        cover.close: rolladen

binary_sensor:
  - platform: gpio
    pin: ${pin_switch1n}
    name: "Switch #1"
    id: switch1

  - platform: gpio
    pin: ${pin_switch2n}
    name: "Switch #2"
    id: switch2

cover:
  - platform: time_based
    name: "Rolladen"
    id: rolladen

    open_action:
      - switch.turn_on: relay1
    open_duration: 16sec

    close_action:
      - switch.turn_on: relay2
    close_duration: 16sec

    stop_action:
      - switch.turn_off: relay1
      - switch.turn_off: relay2
